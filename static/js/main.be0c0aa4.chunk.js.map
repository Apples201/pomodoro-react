{"version":3,"sources":["components/TypeSelect.js","helpers.js","components/TimeDisplay.js","components/Controls.js","components/ToggleSound.js","containers/Pomodoro.js","index.js"],"names":["memo","_ref","types","changeType","selected","react_default","a","createElement","className","map","type","index","key","name","onClick","pad2","num","concat","formatTime","time","minutes","Math","floor","seconds","TimeDisplay","status","progress","document","title","circumference","normalizedRadius","PI","strokeDashoffset","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","controls","start","reset","pause","sound","toggleSound","Pomodoro","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyUp","event","pauseTimer","resetTimer","length","setState","selectedType","running","tick","state","stopInterval","play","navigator","serviceWorker","register","then","sw","showNotification","e","console","log","clearInterval","interval","startTimer","setInterval","currentTime","getStatus","_this$state","getProgress","current","total","handleToggleSound","window","localStorage","setItem","getItem","JSON","parse","addEventListener","Notification","requestPermission","Audio","preload","removeEventListener","_this$state2","src_components_TypeSelect","src_components_TimeDisplay","src_components_Controls","src_components_ToggleSound","Component","defaultProps","ReactDOM","render","src_containers_Pomodoro","getElementById"],"mappings":"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","file":"static/js/main.be0c0aa4.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport './TypeSelect.css';\n\nconst TypeSelect = ({ types, changeType, selected }) => {\n  return (\n    <div className=\"TypeSelect\">\n      {types.map((type, index) => (\n        <button\n          key={type.name}\n          onClick={() => changeType(type)}\n          className={type === selected ? 'active' : ''}\n        >\n          {type.name} <span>[{index + 1}]</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(TypeSelect);\n","function pad2(num) {\n  return num > 9 ? num : `0${num}`;\n}\n\nexport function formatTime(time) {\n  const minutes = pad2(Math.floor(time / 60));\n  const seconds = pad2(Math.floor(time % 60));\n\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { formatTime } from '../helpers';\nimport './TimeDisplay.css';\n\nconst TimeDisplay = ({ time, status, progress }) => {\n  document.title = `(${formatTime(time)}) Pomodoro`;\n\n  const radius = 150;\n  const stroke = 5;\n  const normalizedRadius = radius - stroke * 2;\n  const circumference = normalizedRadius * 2 * Math.PI;\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\n\n  return (\n    <div className=\"TimeDisplay\">\n      <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\n        <circle\n          stroke=\"#ddd\"\n          fill=\"#fff\"\n          strokeWidth={stroke}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n        <circle\n          stroke=\"#D9534F\"\n          fill=\"transparent\"\n          strokeWidth={stroke}\n          strokeDasharray={circumference + ' ' + circumference}\n          style={{ strokeDashoffset }}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n      </svg>\n      <div>\n        <h1>{formatTime(time)}</h1>\n        <p>{status}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeDisplay;\n","import React, { memo } from 'react';\nimport './Controls.css';\n\nconst Controls = ({ start, reset, pause, status }) => {\n  let controls;\n\n  if (!status) {\n    controls = (\n      <button onClick={start} className=\"start\">\n        Start Timer\n      </button>\n    );\n  } else if (status === 'Finished') {\n    controls = (\n      <button onClick={start} className=\"start\">\n        Restart Timer\n      </button>\n    );\n  } else if (status === 'Paused') {\n    controls = (\n      <div>\n        <button onClick={reset} className=\"reset\">\n          Reset\n        </button>\n        <button onClick={pause} className=\"resume\">\n          Resume\n        </button>\n      </div>\n    );\n  } else {\n    controls = (\n      <div>\n        <button onClick={reset} className=\"reset\">\n          Reset\n        </button>\n        <button onClick={pause} className=\"pause\">\n          Pause\n        </button>\n      </div>\n    );\n  }\n\n  return <div className=\"Controls\">{controls}</div>;\n};\n\nexport default memo(Controls);\n","import React, { memo } from 'react';\nimport './ToggleSound.css';\n\nconst ToggleSound = ({ sound, toggleSound }) => {\n  return (\n    <button\n      className={`ToggleSound ${sound && 'active'}`}\n      onClick={toggleSound}\n      title={sound ? 'Disable Sound' : 'Enable Sound'}\n    >\n      <i className={`fa fa-volume-${sound ? 'up' : 'mute'}`} />\n    </button>\n  );\n};\n\nexport default memo(ToggleSound);\n","import React, { Component } from 'react';\nimport TypeSelect from '../components/TypeSelect';\nimport TimeDisplay from '../components/TimeDisplay';\nimport Controls from '../components/Controls';\nimport ToggleSound from '../components/ToggleSound';\nimport './Pomodoro.css';\n\nclass Pomodoro extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedType: props.types[0],\n      time: props.types[0].time,\n      interval: null,\n      running: false,\n      sound:\n        window.localStorage.getItem('pomodoro-react-sound') !== null\n          ? JSON.parse(window.localStorage.getItem('pomodoro-react-sound'))\n          : true\n    };\n  }\n\n  static defaultProps = {\n    types: [\n      { name: 'Pomodoro', time: 3 },\n      { name: 'Short Break', time: 300 },\n      { name: 'Long Break', time: 900 }\n    ]\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyUp);\n    Notification.requestPermission();\n    this.sound = new Audio('bell.flac');\n    this.sound.preload = 'auto';\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  handleKeyUp = event => {\n    if (event.key === ' ') {\n      this.pauseTimer();\n    } else if (event.key === 'Escape') {\n      this.resetTimer();\n    } else if (event.key >= 1 && event.key <= this.props.types.length) {\n      this.changeType(this.props.types[event.key - 1]);\n    }\n  };\n\n  changeType = type => {\n    this.resetTimer();\n    this.setState({ selectedType: type, time: type.time, running: false });\n  };\n\n  tick = () => {\n    if (this.state.time <= 1) {\n      this.stopInterval();\n      this.setState({ running: false });\n      if (this.state.sound) this.sound.play();\n      try {\n        //new Notification(`${this.state.selectedType.name} finished!`);\n        navigator.serviceWorker.register('service-worker.js').then(sw => {\n          sw.showNotification(`${this.state.selectedType.name} finished!`);\n        });\n      } catch (e) {\n        console.log('Notification error', e);\n      }\n    }\n    this.setState(state => ({ time: state.time - 1 }));\n  };\n\n  stopInterval = () => {\n    clearInterval(this.state.interval);\n    this.setState({ interval: null });\n  };\n\n  startTimer = () => {\n    this.setState(state => ({\n      running: true,\n      interval: setInterval(this.tick, 1000),\n      time: state.time > 0 ? state.time : state.selectedType.time\n    }));\n    this.sound.pause();\n    this.sound.currentTime = 0;\n  };\n\n  resetTimer = () => {\n    this.stopInterval();\n    this.setState(state => ({\n      time: state.selectedType.time,\n      running: false\n    }));\n  };\n\n  pauseTimer = () => {\n    this.state.interval ? this.stopInterval() : this.startTimer();\n  };\n\n  getStatus = () => {\n    const { time, running, interval } = this.state;\n    if (time === 0) return 'Finished';\n    if (running && !interval) return 'Paused';\n    if (running) return 'Running';\n  };\n\n  getProgress = () => {\n    const current = this.state.time;\n    const total = this.state.selectedType.time;\n    return ((total - current) / total) * 100;\n  };\n\n  handleToggleSound = () => {\n    this.setState(\n      state => ({\n        sound: !state.sound\n      }),\n      () => {\n        window.localStorage.setItem('pomodoro-react-sound', this.state.sound);\n      }\n    );\n  };\n\n  render() {\n    const { time, selectedType, sound } = this.state;\n    const { types } = this.props;\n\n    return (\n      <div className=\"Pomodoro\">\n        <TypeSelect\n          types={types}\n          selected={selectedType}\n          changeType={this.changeType}\n        />\n        <TimeDisplay\n          time={time}\n          status={this.getStatus()}\n          progress={this.getProgress()}\n        />\n        <Controls\n          start={this.startTimer}\n          reset={this.resetTimer}\n          pause={this.pauseTimer}\n          status={this.getStatus()}\n        />\n        <ToggleSound sound={sound} toggleSound={this.handleToggleSound} />\n      </div>\n    );\n  }\n}\n\nexport default Pomodoro;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pomodoro from './containers/Pomodoro';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n"],"sourceRoot":""}