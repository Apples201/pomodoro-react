{"version":3,"sources":["components/TypeSelect.js","helpers.js","components/TimeDisplay.js","components/Controls.js","components/ToggleSound.js","containers/Pomodoro.js","index.js"],"names":["TypeSelect","_ref","types","changeType","selected","react_default","a","createElement","className","map","type","index","key","name","onClick","pad2","num","concat","formatTime","time","minutes","Math","floor","seconds","TimeDisplay","status","progress","document","title","circumference","normalizedRadius","PI","strokeDashoffset","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","Controls","start","reset","pause","running","interval","ToggleSound","sound","toggleSound","Pomodoro","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyUp","event","pauseTimer","resetTimer","length","setState","selectedType","tick","state","stopInterval","play","Notification","_unused","clearInterval","startTimer","setInterval","currentTime","getStatus","_this$state","getProgress","current","total","handleToggleSound","window","localStorage","setItem","getItem","JSON","parse","addEventListener","requestPermission","Audio","preload","removeEventListener","_this$state2","src_components_TypeSelect","src_components_TimeDisplay","src_components_Controls","src_components_ToggleSound","Component","defaultProps","ReactDOM","render","src_containers_Pomodoro","getElementById"],"mappings":"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","file":"static/js/main.2e26816c.chunk.js","sourcesContent":["import React from 'react';\nimport './TypeSelect.css';\n\nconst TypeSelect = ({ types, changeType, selected }) => {\n  return (\n    <div className=\"TypeSelect\">\n      {types.map((type, index) => (\n        <button\n          key={type.name}\n          onClick={() => changeType(type)}\n          className={type === selected ? 'active' : ''}\n        >\n          {type.name} <span>[{index + 1}]</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default TypeSelect;\n","function pad2(num) {\n  return num > 9 ? num : `0${num}`;\n}\n\nexport function formatTime(time) {\n  const minutes = pad2(Math.floor(time / 60));\n  const seconds = pad2(Math.floor(time % 60));\n\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { formatTime } from '../helpers';\nimport './TimeDisplay.css';\n\nconst TimeDisplay = ({ time, status, progress }) => {\n  document.title = `(${formatTime(time)}) Pomodoro`;\n\n  const radius = 150;\n  const stroke = 5;\n  const normalizedRadius = radius - stroke * 2;\n  const circumference = normalizedRadius * 2 * Math.PI;\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\n\n  return (\n    <div className=\"TimeDisplay\">\n      <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\n        <circle\n          stroke=\"#ddd\"\n          fill=\"#fff\"\n          strokeWidth={stroke}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n        <circle\n          stroke=\"#D9534F\"\n          fill=\"transparent\"\n          strokeWidth={stroke}\n          strokeDasharray={circumference + ' ' + circumference}\n          style={{ strokeDashoffset }}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n      </svg>\n      <div>\n        <h1>{formatTime(time)}</h1>\n        <p>{status}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeDisplay;\n","import React from 'react';\nimport './Controls.css';\n\nconst Controls = ({ start, reset, pause, running, interval, time }) => {\n  return (\n    <div className=\"Controls\">\n      {running === false ? (\n        <button onClick={start} className=\"start\">\n          {time === 0 ? 'Restart timer' : 'Start timer'}\n        </button>\n      ) : (\n        <div>\n          <button onClick={reset} className=\"reset\">\n            Reset\n          </button>\n          <button onClick={pause} className={interval ? 'pause' : 'resume'}>\n            {interval ? 'Pause' : 'Resume'}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from 'react';\nimport './ToggleSound.css';\n\nconst ToggleSound = ({ sound, toggleSound }) => {\n  return (\n    <button\n      className={`ToggleSound ${sound && 'active'}`}\n      onClick={toggleSound}\n      title={sound ? 'Disable Sound' : 'Enable Sound'}\n    >\n      <i className={`fa fa-volume-${sound ? 'up' : 'mute'}`} />\n    </button>\n  );\n};\n\nexport default ToggleSound;\n","import React, { Component } from 'react';\nimport TypeSelect from '../components/TypeSelect';\nimport TimeDisplay from '../components/TimeDisplay';\nimport Controls from '../components/Controls';\nimport ToggleSound from '../components/ToggleSound';\nimport './Pomodoro.css';\n\nclass Pomodoro extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedType: props.types[0],\n      time: props.types[0].time,\n      interval: null,\n      running: false,\n      sound:\n        window.localStorage.getItem('pomodoro-react-sound') !== null\n          ? JSON.parse(window.localStorage.getItem('pomodoro-react-sound'))\n          : true\n    };\n  }\n\n  static defaultProps = {\n    types: [\n      { name: 'Pomodoro', time: 1500 },\n      { name: 'Short Break', time: 300 },\n      { name: 'Long Break', time: 900 }\n    ]\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyUp);\n    Notification.requestPermission();\n    this.sound = new Audio('bell.flac');\n    this.sound.preload = 'auto';\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  handleKeyUp = event => {\n    if (event.key === ' ') {\n      this.pauseTimer();\n    } else if (event.key === 'Escape') {\n      this.resetTimer();\n    } else if (event.key >= 1 && event.key <= this.props.types.length) {\n      this.changeType(this.props.types[event.key - 1]);\n    }\n  };\n\n  changeType = type => {\n    this.resetTimer();\n    this.setState({ selectedType: type, time: type.time, running: false });\n  };\n\n  tick = () => {\n    if (this.state.time <= 1) {\n      this.stopInterval();\n      this.setState({ running: false });\n      if (this.state.sound) this.sound.play();\n      try {\n        new Notification(`${this.state.selectedType.name} finished!`);\n      } catch {}\n    }\n    this.setState(state => ({ time: state.time - 1 }));\n  };\n\n  stopInterval = () => {\n    clearInterval(this.state.interval);\n    this.setState({ interval: null });\n  };\n\n  startTimer = () => {\n    this.setState(state => ({\n      running: true,\n      interval: setInterval(this.tick, 1000),\n      time: state.time > 0 ? state.time : state.selectedType.time\n    }));\n    this.sound.pause();\n    this.sound.currentTime = 0;\n  };\n\n  resetTimer = () => {\n    this.stopInterval();\n    this.setState(state => ({\n      time: state.selectedType.time,\n      running: false\n    }));\n  };\n\n  pauseTimer = () => {\n    this.state.interval ? this.stopInterval() : this.startTimer();\n  };\n\n  getStatus = () => {\n    const { time, running, interval } = this.state;\n    if (time === 0) return 'Finished';\n    if (running && !interval) return 'Paused';\n    if (running) return 'Running';\n  };\n\n  getProgress = () => {\n    const current = this.state.time;\n    const total = this.state.selectedType.time;\n    return ((total - current) / total) * 100;\n  };\n\n  handleToggleSound = () => {\n    this.setState(\n      state => ({\n        sound: !state.sound\n      }),\n      () => {\n        window.localStorage.setItem('pomodoro-react-sound', this.state.sound);\n      }\n    );\n  };\n\n  render() {\n    const { time, running, interval, selectedType, sound } = this.state;\n    const { types } = this.props;\n\n    return (\n      <div className=\"Pomodoro\">\n        <TypeSelect\n          types={types}\n          selected={selectedType}\n          changeType={this.changeType}\n        />\n        <TimeDisplay\n          time={time}\n          status={this.getStatus()}\n          progress={this.getProgress()}\n        />\n        <Controls\n          start={this.startTimer}\n          reset={this.resetTimer}\n          pause={this.pauseTimer}\n          running={running}\n          interval={interval}\n          time={time}\n        />\n        <ToggleSound sound={sound} toggleSound={this.handleToggleSound} />\n      </div>\n    );\n  }\n}\n\nexport default Pomodoro;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pomodoro from './containers/Pomodoro';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n"],"sourceRoot":""}